name: Main

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  release:
    types:
      - published

env:
  FRONTEND_PROJECT_NAME: sample-app-frontend
  BACKEND_PROJECT_NAME: sample-app-backend
  ORGANIZATION: jakubbt

jobs:
  backend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-node@v1
      with:
        node-version: '14.x'
    - name: Install dependencies
      run: |
        cd ./backend
        npm install
  frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-node@v1
      with:
        node-version: '14.x'
    - name: Install dependencies
      run: |
        cd ./frontend
        npm install
    - name: build
      run: |
        cd ./frontend
        npm run build
  push_version_backend:
    name: Push backend container
    runs-on: ubuntu-latest
    needs: backend
    steps:

    - uses: actions/checkout@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build container image
      run: |
        cd ./backend
        docker build -t ${{ env.ORGANIZATION }}/${{ env.BACKEND_PROJECT_NAME }} .

    - name: Push image to ghcr
      run: |
        docker tag ${{ env.ORGANIZATION }}/${{ env.BACKEND_PROJECT_NAME }} ghcr.io/$ORGANIZATION/${{ env.BACKEND_PROJECT_NAME }}:latest
        
        docker push ghcr.io/${{ env.ORGANIZATION }}/${{ env.BACKEND_PROJECT_NAME }}:$VERSION

  # push_version_frontend:
  #   name: Push container
  #   if: github.event_name == 'release'
  #   runs-on: ubuntu-latest
  #   needs: lint_frontend
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Rename config
  #     run: |
  #       cd ./frontend
  #       mv ./src/config.example.ts ./src/config.ts
  #   - name: Build
  #     run: |
  #       cd ./frontend
  #       docker build -t $ORGANIZATION/$FRONTEND_PROJECT_NAME .
  #   - name: Install doctl
  #     uses: digitalocean/action-doctl@v2
  #     with:
  #       token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
  #   - name: Push image to Digital Ocean Container Registry
  #     run: |
  #       VERSION=${GITHUB_REF#"refs/tags/"}
        
  #       docker tag $ORGANIZATION/$FRONTEND_PROJECT_NAME registry.digitalocean.com/$ORGANIZATION/$FRONTEND_PROJECT_NAME:$VERSION
        
  #       doctl auth init
  #       doctl registry login
        
  #       docker push registry.digitalocean.com/$ORGANIZATION/$FRONTEND_PROJECT_NAME:$VERSION
  # deploy_prod_backend:
  #   needs: push_version_backend
  #   name: Deploy to prod
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'release'
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Install doctl
  #     uses: digitalocean/action-doctl@v2
  #     with:
  #       token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
  #   - name: Obtain kubernetes config
  #     env:
  #       cluster: ${{ secrets.DIGITALOCEAN_KUBERNETES_PRODUCTION }}
  #     run: doctl kubernetes cluster kubeconfig save $cluster
  #   - name: Deploy new version
  #     run: |
  #       VERSION=${GITHUB_REF#"refs/tags/"}
        
  #       kubectl set image deployment/$BACKEND_PROJECT_NAME-deployment $BACKEND_PROJECT_NAME-application=registry.digitalocean.com/$ORGANIZATION/$BACKEND_PROJECT_NAME:$VERSION
  # deploy_prod_frontend:
  #   needs: push_version_frontend
  #   name: Deploy to prod
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'release'
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Install doctl
  #     uses: digitalocean/action-doctl@v2
  #     with:
  #       token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
  #   - name: Obtain kubernetes config
  #     env:
  #       cluster: ${{ secrets.DIGITALOCEAN_KUBERNETES_PRODUCTION }}
  #     run: doctl kubernetes cluster kubeconfig save $cluster
  #   - name: Deploy new version
  #     run: |
  #       VERSION=${GITHUB_REF#"refs/tags/"}
